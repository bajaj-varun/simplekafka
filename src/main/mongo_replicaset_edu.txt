rs.reconfig(configuration, force)
1) Reconfigures an existing replica set, overwriting the existing replica set configuration. To run the method, you must connect to the primary of the replica set.


1) Start each member of replica set with following options -
	1.1) Start "mongod" with following options.
	1.2) Set "replication.replSetName" for replica set name.
	1.3) If application connects to multiple replSet then it should have distinct name in cluster.
	1.4) Set "net.bindIp" option to hostname/Ip or comma seperated hostnames of IPS.

	*mongod --replSet "rs0" --bind_ip localhost,<hostname(s)|ip address(es)>*

2) Connect to "mongo" shell.
3) run "rs.initiate()" command.
4) View replicaset configuration "rs.conf()"
5) check status "rs.status()"

Convert standalone to replicaset
1) Shutdown standalone "mongod" instance.
2) Restart instance with "--replSet" option to specify name of new replica set.

*mongod --port 27017 --dbpath /srv/mongodb/db0 --replSet rs0 --bind_ip localhost,<hostname(s)|ip address(es)>*

To add member in replica set "rs.add()"

Connect a mongo shell to one of the sharded cluster’s mongos instances and retrieve the shard information:
*var myShard = db.getSiblingDB("config").shards.findOne( { _id: "<name>"} )*

*Replica set election*
------------------------
1) Election happen in following events -
	1.1) Adding new node to replica set.
	1.2) Initiate replica set.
	1.3) replica set maintenance using method "rs.stepDown()" or "rs.reconfig()"
	1.4) Seconday member loosing connectivity with primary member for configured timeout (default 10 sec.)

2) Replica set cannot process write operations until the election completes successfully.
3) The replica set can continue to serve read queries if such queries are configured to run on secondaries.

Heartbeats => Replica set members send heartbeats (pings) to each other every two seconds. If a heartbeat does not return within 10 seconds, the other members mark the delinquent member as inaccessible.

Rollbacks During Replica Set Failover
1) A rollback reverts write operations on a former primary when the member rejoins its replica set after a failover. A rollback is necessary only if the primary had accepted write operations that the secondaries had not successfully replicated before the primary stepped down.
2) When the primary rejoins the set as a secondary, it reverts, or “rolls back,” its write operations to maintain database consistency with the other members.
3) Starting in version 4.0, MongoDB adds the parameter *createRollbackDataFiles* to control whether or not rollback files are created during rollbacks.
4) By default, when a rollback occurs, MongoDB writes the rollback data to BSON files. For each collection whose data is rolled back, the rollback files are located in a <dbpath>/rollback/<db>.<collection> directory and have filenames of the form: 
	- removed.<timestamp>.bson

Avoid Replica Set Rollbacks
1) For replica sets, the default write concern {w: 1} only provides acknowledgement of write operations on the primary. With the default write concern, data may be rolled back if the primary steps down before the write operations have replicated to any of the secondaries.	

